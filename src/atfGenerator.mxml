<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" 
					   creationComplete="creationCompleteHandler(event)"
					   height="700" width="600">
	<s:layout>
		<s:VerticalLayout paddingTop="5" paddingLeft="10" paddingRight="10">
			<s:gap>3</s:gap>
		</s:VerticalLayout>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import mx.events.FileEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			import spark.components.Alert;
			private var file:File;
			
			private function btn_click(evt:MouseEvent):void {
				file = new File();
				file.addEventListener(Event.SELECT, file_select);
				file.browseForOpen("Please select a file...");
			}
			
			
			
			private function save():void{
				if (!so)return;
				so.data.png2atf = file.nativePath;
				so.data.pngFolder = pngFolder;
				so.data.atfFolder = atfFolder;
				so.data.params = textInp.text;
				
				var flushStatus : String = null;
				try {
					flushStatus = so.flush(10000);
				} catch (error : Error) {
					trace("Error...Could not write SharedObject to disk");
				}
				if (flushStatus != null) {
					switch (flushStatus) {
						case SharedObjectFlushStatus.PENDING:
							trace("Requesting permission to save object...");
							so.addEventListener(NetStatusEvent.NET_STATUS, onFlushStatus);
							break;
						case SharedObjectFlushStatus.FLUSHED:
							break;
					}
				}
			}
			
			private function onFlushStatus(event : NetStatusEvent) : void {
				trace("User closed permission dialog...\n");
				switch (event.info.code) {
					case "SharedObject.Flush.Success":
						trace("User granted permission -- value saved.");
						break;
					case "SharedObject.Flush.Failed":
						trace("User denied permission -- value not saved.");
						break;
				}
				
				so.removeEventListener(NetStatusEvent.NET_STATUS, onFlushStatus);
			}
			
			var process:NativeProcess;//NativeProcess instance
			var pInfo:NativeProcessStartupInfo;
			var args:Vector.<String>;//Arguments to be passed to the process 
			
			private function init_the_process():void
			{
				console.text+="initializing\n";
				pInfo = new NativeProcessStartupInfo();
				pInfo.executable = file;
				process = new NativeProcess();
				process.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, onOutputData);
				process.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, onErrorData);
				process.addEventListener(NativeProcessExitEvent.EXIT, onExit);
				process.addEventListener(IOErrorEvent.STANDARD_OUTPUT_IO_ERROR, onIOError);
				process.addEventListener(IOErrorEvent.STANDARD_ERROR_IO_ERROR, onIOError);
				start_decode_process()
			}
			
			public function onOutputData(event:ProgressEvent):void
			{
				console.text += "Output: "+ process.standardOutput.readUTFBytes(process.standardOutput.bytesAvailable)+"\n"; 
			}
			
			public function onErrorData(event:ProgressEvent):void
			{
				console.text += "ERROR -"+ process.standardError.readUTFBytes(process.standardError.bytesAvailable)+"\n"; 
			}
			
			public function onExit(event:NativeProcessExitEvent):void
			{
				console.text += "Process exited with "+ event.exitCode+"\n";
				atfList.refresh();
			}
			
			public function onIOError(event:IOErrorEvent):void
			{
				console.text += event.toString()+"\n";
			}
			
			private function start_decode_process():void
			{
				args = new Vector.<String>();
				var sit:File = pngList.selectedItem as File;
				var name:String = sit.name;
				name = name.split(".")[0]+".atf";
				
				args.push("-i",pngList.selectedPath,"-o",atfList.directory.nativePath+"/"+name);
				if (textInp.text){
					var arr:Array = textInp.text.split(" ");
					for each (var arg:String in arr){
						args.push(arg);
					}
				}
				trace (args);
				pInfo.arguments = args;
				if (process.running)
				{
					process.closeInput();
					process.exit();
				}
//				//all the info needed to to start the process(executable) is feeded into NativeProcessStartupInfo and sent as a argument while starting the NativeProcess
				process.start(pInfo);
			}
			
			protected function generateHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if (!file){
					Alert.show("Please provide path to png2atf");
				}else if (!pngList.selectedItem){
					Alert.show("Please select png file");
				}else{
					previewImg.visible = false;
					console.visible = true;
					init_the_process();
				}
				
			}
			
			private var so:SharedObject;
			private var png2atfPath:String;
			private var pngFolder:String;
			private var atfFolder:String;
			
			
			private var atfdir:File;
			private var pngdir:File;
			
			protected function selectATFHandler(event:MouseEvent):void
			{
				atfdir = new File();
				atfdir.addEventListener(Event.SELECT, atfDir_select);
				atfdir.browseForDirectory("Please select output folder...");
			}
			
			
			protected function selectPNGHandler(event:MouseEvent):void
			{
				pngdir = new File();
				pngdir.addEventListener(Event.SELECT, pngDir_select);
				pngdir.browseForDirectory("Please select png folder...");
				
			}
			private function atfDir_select(evt:Event):void {					
				atfList.directory = File(evt.currentTarget);
				atfFolder = atfList.directory.nativePath;
				save();
			}
			
			private function pngDir_select(evt:Event):void {
				pngList.directory = File(evt.currentTarget);
				pngFolder = pngList.directory.nativePath;
				save();
			}
			
			private function file_select(evt:Event):void {
				lbl.text = File(evt.currentTarget).nativePath;	
				save();
			}
			
			protected function pngList_changeHandler(event:ListEvent):void
			{
				
				if ((pngList.selectedItem as File).isDirectory){
					previewImg.visible = false;
					console.visible = true;
					return;
				}
				previewImg.visible = true;
				console.visible = false;
				previewImg.source = "file://"+pngList.selectedPath;
			}
			
			protected function atfListChangeHandler(event:ListEvent):void
			{
				atfFolder = atfList.directory.nativePath;
				save();
			}
			
			protected function pngList_directoryChangeHandler(event:FileEvent):void
			{
				pngFolder = pngList.directory.nativePath;
				save();
				
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				so = SharedObject.getLocal("wsCasinoSettings");
				if (so.size > 0) {
					png2atfPath = so.data.png2atf;
					pngFolder = so.data.pngFolder;
					atfFolder = so.data.atfFolder;
					var params:String = so.data.params;
				}
				if (params){
					textInp.text = params;
				}
				if (png2atfPath){
					file = new File(png2atfPath);
					lbl.text = png2atfPath;
				}
				if (pngFolder){
					pngList.directory = new File(pngFolder);
				}
				if (atfFolder){
					atfList.directory = new File(atfFolder);
				}
				
				console.text += "-c    Create a block compressed texture set (DXT1+ETC1+PVRTC4bpp). Use d, e or p to only encode and embed either dxt1, etc1 or pvrtc.\n\n";				
				console.text += "-m    Create a cubemap. Input files need to be named filename n.png where n=0-5. Order is [-x,+x,-y,+y,-z,+z].\n\n";
				console.text += "-r    Compress block compressed textures using JPEG-XR+LZMA to reduce file size.\n\n";
				console.text += "-e    Embed empty (black) mip maps.\n\n";
				console.text += "-n    Embed a specific range of texture levels (main texture + mip map). The range is defined as start, end. 0 is the main texture, mip map starts with 1.\n\n";
				console.text += "-x    Read mip map images from input files instead of autocreating them. Input files need to be named filename ll.png where ll=00-12. For cubemaps the format is filename ll n.png\n\n";
				console.text += "-s    Silence output during compression.\n\n";
				console.text += "Options for non-block compressed textures:\n"; 
				console.text += "-4  Use 4:4:4 colorspace\n";
				console.text += "-2  Use 4:2:2 colorspace\n";
				console.text += "-0  Use 4:2:0 colorspace\n\n";			
				console.text += "-q  quantization level. 0 == lossless. (default is 30 for standard textures and 0 for block compressed textures)\n\n";
				console.text += "-f  trim flex bits. 0 == lossless. (default is 0)\n\n";

			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:HGroup width="100%">
		<s:VGroup width="100%">
		<s:HGroup width="100%">
			<s:Button label="atf2png" click="btn_click(event)"/>
			<s:Label text="Please provide png2atf path" id="lbl" height="20" verticalAlign="middle"/>			
		</s:HGroup>
		<s:TextInput width="100%" id="textInp" text="-n 0 0 -q 15"/>	
		</s:VGroup>
		
		<s:Button label="GENERATE" click="generateHandler(event)" height="50"/>		
	</s:HGroup>
	
	<s:Spacer height="20"/>
	<s:HGroup width="100%">
		<s:VGroup width="100%">
			<s:HGroup width="100%">
			<s:Button label="PNG Folder" click="selectPNGHandler(event)"/>
			<s:Button label="UP" click="{pngList.navigateUp()}"/>
			<s:Button label="refresh" click="pngList.refresh()"/>
			</s:HGroup>

			<s:Label width="100%" id="pngFolderLabel" text="{pngList.directory.nativePath}" height="10"/>
			<mx:FileSystemList width="100%" height="200" allowMultipleSelection="false" 
							   id="pngList" change="pngList_changeHandler(event)" directoryChange="pngList_directoryChangeHandler(event)">
				<mx:extensions>
					<fx:Array>
						<fx:String>png</fx:String>
					</fx:Array>
				</mx:extensions>
			</mx:FileSystemList>		
		</s:VGroup>
		<s:VGroup width="100%">
			<s:HGroup width="100%">
			<s:Button label="OUTPUT Folder" click="selectATFHandler(event)"/>
			<s:Button label="UP" click="{atfList.navigateUp()}"/>
			<s:Button label="refresh" click="{atfList.refresh()}"/>
			</s:HGroup>
			<s:Label width="100%" id="atfFolderLabel" text="{atfList.directory.nativePath}" height="10"/>
			<mx:FileSystemList width="100%" height="200" id="atfList" directoryChange="atfListChangeHandler(null)">
				<mx:extensions>
					<fx:Array>
						<fx:String>atf</fx:String>
					</fx:Array>
				</mx:extensions>
			</mx:FileSystemList>			
		</s:VGroup>
	</s:HGroup>
	<s:Group width="100%" height="100%">
	<s:TextArea width="100%" height="100%" id="console"/>
	<s:Image width="100%" height="100%" id="previewImg" smooth="true" />
		
	</s:Group>
</s:WindowedApplication>
